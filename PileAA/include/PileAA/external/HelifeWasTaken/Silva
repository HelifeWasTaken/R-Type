/**
 * Silva.hpp
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

#include <any>
#include <cstddef>
#include <exception>
#include <functional>
#include <numeric>
#include <optional>
#include <string>
#include <typeindex>
#include <typeinfo>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include "sparse_array"

#ifndef SILVA_ECS_PRETTY_FUNCTION
    #if defined(_MSC_VER)
        #define SILVA_ECS_PRETTY_FUNCTION __FUNCSIG__
    #elif defined(__GNUC__) || defined(__GNUG__) || defined(__clang__)
//       #define SILVA_ECS_PRETTY_FUNCTION __PRETTY_FUNCTION__
        #define SILVA_ECS_PRETTY_FUNCTION ""
    #else
        #define SILVA_ECS_PRETTY_FUNCTION __func__ " (pretty function not supported)"
    #endif
#endif

#ifdef SILVA_ECS_LOG_SPDLOG
    #include <spdlog/spdlog.h>
    #include <iostream>
    #define SILVA_ECS_LOG(msg, ...) spdlog::info(msg, __VA_ARGS__);
#elif SILVA_ECS_LOG_FMT
    #include <format>
    #define SILVA_ECS_LOG(msg, ...) std::cout << std::format(msg, __VA_ARGS__) << std::endl
#else
    #define SILVA_ECS_LOG(msg, ...)
#endif

namespace hl {
namespace silva {
    template<typename ...Args>
    concept has_arguments_t = sizeof...(Args) > 0;

    template<typename ...Args>
    concept has_no_arguments_t = sizeof...(Args) == 0;

    class Error : public std::exception {
    public:
        Error(const std::string& msg)
            : msg(msg)
        {
        }
        const char* what() const noexcept override { return msg.c_str(); }

    private:
        const std::string msg;
    };

    class Entity {
    public:
        using Id = std::size_t;
        static constexpr Id INVALID_ID = std::numeric_limits<Id>::max();

    private:
        Id id = INVALID_ID;

    public:
        /**
         * @brief Construct a new Entity object
         * @param  id: The id of the entity
         * @retval None
         */
        Entity(const Id& id)
            : id(id)
        {
        }
        Entity(Id&& id)
            : id(id)
        {
        }
        Entity(const Entity& other) = default;
        Entity(Entity&& other) = default;
        Entity() = default;
        Entity& operator=(const Entity& other) = default;
        Entity& operator=(Entity&& other) = default;
        Entity& operator=(const Id& id)
        {
            this->id = id;
            return *this;
        }
        Entity& operator=(Id&& id)
        {
            this->id = id;
            return *this;
        }

        ~Entity() = default;
        /**
         * @brief Get the Id of the entity
         * @retval The id of the entity
         */
        operator Id() const { return id; }
        /**
         * @brief Get the Id of the entity
         * @retval The id of the entity
         */
        Id get_id() const { return id; }
    };

    /**
     * @brief  Template Component class
     */
    template <class... Components> class zipper;

    /**
     * @brief  Template Component class
     */
    template <class... Components> using view = zipper<Components...>;

    class registry {
    public:
        using anonymous_t = std::any;

        using entity_t = Entity;
        using entity_id_t = Entity::Id;
        using dead_entities_t = std::unordered_set<entity_id_t>;

        using component_index_t = std::size_t;
        using component_registry
            = std::unordered_map<std::type_index, component_index_t>;
        template <typename Component>
        using component_array = hl::silva::sparse_array<Component>;
        using components_array = std::vector<anonymous_t>;
        using component_removal_system_t
            = std::function<void(registry&, entity_t const&)>;
        using component_removal_system_array
            = std::vector<component_removal_system_t>;

        using system_t = std::function<void(registry&)>;
        using system_array = std::vector<system_t>;

        /**
         * @brief  Return casted component array
         * @retval Casted component array
         */
        template <class Component>
        component_array<Component>& component_cast(anonymous_t& anon)
        {
            return std::any_cast<component_array<Component>&>(anon);
        }
        /**
         * @brief  Return the index of the component
         * @retval The index of the component
         */
        template <class Component> component_index_t type_index() const
        {
            return _components_types_index.at(
                std::type_index(typeid(Component)));
        }
        /**
         * @brief  Register a new component
         * @retval Reference of the class registry
         */
        template <class Component,typename ...OtherComponents>
        requires has_no_arguments_t<OtherComponents...>
        registry& register_component()
        {
            anonymous_t anonyme = component_array<Component>();

            SILVA_ECS_LOG("silva::registry: Registering component {} -> {}",
                typeid(Component).name(), SILVA_ECS_PRETTY_FUNCTION);

            _components_types_index[std::type_index(typeid(Component))]
                = _last_component_index++;
            _components.push_back(std::move(anonyme));
            _remove_system_methods.push_back(
                [](registry& r, const entity_t& e) {
                    r.remove_component<Component>(e);
                });
            return *this;
        }
        /**
         * @brief  Register a new component
         * @retval Reference of the class registry
         */
        template <class Component, typename ...OtherComponents>
        requires has_arguments_t<OtherComponents...>
        inline registry& register_component()
        {
            anonymous_t anonyme = component_array<Component>();

            SILVA_ECS_LOG("silva::registry: Registering component {} -> {}",
               typeid(Component).name(), SILVA_ECS_PRETTY_FUNCTION);

            _components_types_index[std::type_index(typeid(Component))]
                = _last_component_index++;
            _components.push_back(std::move(anonyme));
            _remove_system_methods.push_back(
                [](registry& r, const entity_t& e) {
                    r.remove_component<Component>(e);
                });
            return register_component<OtherComponents...>();
        }

        /**
         * @brief   Get the component array
         *          if SILVA_DYNAMIC_REGISTER is defined,
         *          the component will be registered if not already registered
         * @retval component_array<Component>
         */
        template <class Component> component_array<Component>& get_components()
        {
            try {
                // SILVA_ECS_LOG("silva::registry: Getting component {} -> {}", typeid(Component).name(), SILVA_ECS_PRETTY_FUNCTION);
                return component_cast<Component>(
                    _components[type_index<Component>()]);
            } catch (const std::exception& e) {
#ifndef SILVA_DYNAMIC_REGISTER
                throw Error(std::string("Component not registered: \"")
                    + SILVA_ECS_PRETTY_FUNCTION + "\" -> " + e.what());
#else
                register_component<Component>();
                return get_components<Component>();
#endif
            }
        }
        /**
         * @brief  Get the component array (const)
         *         if SILVA_DYNAMIC_REGISTER is defined,
         *         the component will be registered if not already registered
         *         even if this is const (performs a const_cast on the registry)
         * @retval component_array<Component> const
         */
        template <class Component>
        component_array<Component> const& get_components() const
        {
            try {
                // SILVA_ECS_LOG("silva::registry: Getting component (const) {} -> {}", typeid(Component).name(), SILVA_ECS_PRETTY_FUNCTION);
                return component_cast<Component>(
                    _components[type_index<Component>()]);
            } catch (std::exception const& e) {
#ifndef SILVA_DYNAMIC_REGISTER
                throw Error(std::string("Component not registered: \"")
                    + SILVA_ECS_PRETTY_FUNCTION + "\" -> " + e.what());
#else
                const_cast<registry*>(this)->register_component<Component>();
                return get_components<Component>();
#endif
            }
        }
        /**
         * @brief  Create a new entity
         * @retval New entity
         */
        entity_t spawn_entity()
        {
            if (_killed_entities.empty()) {
                SILVA_ECS_LOG("silva::registry: Spawning entity {} -> {}", _entities_count, SILVA_ECS_PRETTY_FUNCTION);
                return entity_t(_entities_count++);
            }
            const entity_id_t random_id = *_killed_entities.begin();
            _killed_entities.erase(random_id);
            SILVA_ECS_LOG("silva::registry: Spawning entity {} -> {}", random_id, SILVA_ECS_PRETTY_FUNCTION);
            return entity_t(random_id);
        }
        /**
         * @brief  Destroy an entity
         * @param  entity: The entity to destroy
         * @retval None
         */
        void kill_entity(entity_t const& e)
        {
            SILVA_ECS_LOG("silva::registry: Killing entity {} -> {} (killed next frame)", e.get_id(), SILVA_ECS_PRETTY_FUNCTION);
            _to_kill_entities.insert(e.get_id());
        }

        /**
         * @brief Remove all entities
         *
         */
        void clear()
        {
            for (Entity::Id i = 0; i < _entities_count; i++) {
                kill_entity(i);
            }
        }

        /**
         * @brief  Add a component to an entity
         * @param  &to: The entity to add the component
         * @param  &&c: The component to add
         * @retval Entity with the component
         */
        template <class Component>
        registry& insert(entity_t const& to, Component&& c)
        {
            _last_entity_id = to.get_id();
            return insert_r(std::move(c));
        }
        /**
         * @brief  Add a component to an entity
         * @param  &&to: The entity to add the component
         * @param  &&c: The component to add
         * @retval Entity with the component
         */
        template <class Component>
        registry& insert_r(Component&& c)
        {
            SILVA_ECS_LOG("silva::registry: Inserting component {} to entity {} -> {}",
                        typeid(Component).name(), _last_entity_id, SILVA_ECS_PRETTY_FUNCTION);
            get_components<Component>().insert(_last_entity_id, std::move(c));
            return *this;
        }
        /**
         * @brief  Remove a component from an entity
         * @param  &from: The entity to remove the component
         * @retval Entity without the component
         */
        template <class Component, typename... Params>
        registry& emplace(entity_t const& to, Params&&... p)
        {
            _last_entity_id = to.get_id();
            return emplace_r<Component, Params...>(std::forward<Params>(p)...);
        }
        /**
         * @brief  Remove a component from an entity
         * @param  &&from: The entity to remove the component
         * @retval Entity without the component
         */
        template <class Component, typename... Params>
        registry& emplace_r(Params&&... p)
        {
            Component c = { std::forward<Params>(p)... };
            SILVA_ECS_LOG("silva::registry: Emplacing component {} to entity {} -> {}",
                    typeid(Component).name(), _last_entity_id, SILVA_ECS_PRETTY_FUNCTION);
            get_components<Component>().insert(entity_t(_last_entity_id), std::move(c));
            return *this;
        }
        /**
         * @brief  Remove a component from an entity
         * @param  &from: The entity to remove the component
         * @retval Entity without the component
         */
        template <class Component>
        registry& remove_component(entity_t const& from)
        {
            SILVA_ECS_LOG("silva::registry: Removing component {} from entity {} -> {}",
                    typeid(Component).name(), from.get_id(), SILVA_ECS_PRETTY_FUNCTION);
            get_components<Component>().erase(from.get_id());
            return *this;
        }
        /**
         * @brief  Add a system to the registry
         * @param  sys: The system to add
         * @retval Reference of the class registry
         */
        registry& add_system(const system_t& sys)
        {
            SILVA_ECS_LOG("silva::registry: Adding system {} -> {}",
                    typeid(sys).name(), SILVA_ECS_PRETTY_FUNCTION);
            _systems.push_back(sys);
            return *this;
        }
        /**
         * @brief  Add a system to the registry
         * @param  sys: The system to add
         * @retval Reference of the class registry
         */
        registry& add_system(system_t&& sys)
        {
            SILVA_ECS_LOG("silva::registry: Adding system {} -> {}",
                    typeid(sys).name(), SILVA_ECS_PRETTY_FUNCTION);
            _systems.push_back(sys);
            return *this;
        }
        /**
         * @brief  Update all the systems and the components
         * @retval None
         */
        void update()
        {
            if (_to_kill_entities.empty() == false) {
                for (const auto& e : _to_kill_entities) {
                    if (e == Entity::INVALID_ID)
                        continue;
                    for (auto&& f : _remove_system_methods)
                        f(*this, entity_t(e));
                    _killed_entities.insert(e);
                }
                _to_kill_entities.clear();
                //if (_killed_entities.size() == _entities_count)
                //    _killed_entities.clear();
            }
            for (const system_t& system : _systems) {
                system(*this);
            }
        }

        /**
         * @brief  Tell if the entity is alive
         * @retval true if the entity is alive
         */
        bool is_alive(entity_t const& e) const
        {
            return e.get_id() != Entity::INVALID_ID
                && e.get_id() < _entities_count
                && _killed_entities.find(e.get_id()) == _killed_entities.end();
        }

        /**
         * @brief  Return the number of entities
         * @retval Number of entities
         */
        entity_id_t entities_count() const { return _entities_count; }

        /**
         * @brief Get the component of an entity
         * @param e: The entity
         * @tparam Component: The component
         */
        template <class Component>
        Component& get_component(entity_t const& e)
        {
            // SILVA_ECS_LOG("silva::registry: Getting component {} from entity {} -> {}",
            // typeid(Component).name(), e.get_id(), SILVA_ECS_PRETTY_FUNCTION);
            auto& comps = get_components<Component>();
            if (comps.non_null(e.get_id()))
                return comps[e.get_id()].value();
            throw Error(std::string("Entity does not have the component: ") + SILVA_ECS_PRETTY_FUNCTION);
        }

        /**
         * @brief Tells wheter the entity has the component
         * @param e: The entity
         * @tparam Component: The component
         */
        template <typename T> bool has_component(entity_t const& e)
        {
            return get_components<T>().non_null(e.get_id());
        }

        /**
         * @brief Get an entity from a Component
         * @param c: The component
         * @tparam Component: The component
         */
        template <typename T> entity_t get_entity(T const& c)
        {
            return entity_t(get_components<T>().get_index());
        }

        /**
         * @brief  Return the number of killed entities
         * @retval Number of killed entities
         */
        template <typename... Components> zipper<Components...> zip()
        {
            return zipper<Components...>(*this);
        }
        /**
         * @brief  Return the number of killed entities
         * @retval Number of killed entities
         */
        template <typename... Components> view<Components...> view()
        {
            return zip<Components...>();
        }

    private:
        component_index_t _last_component_index = 0;
        component_registry _components_types_index;
        components_array _components;
        component_removal_system_array _remove_system_methods;

        entity_id_t _entities_count = 0;
        dead_entities_t _to_kill_entities;
        dead_entities_t _killed_entities;
        entity_id_t _last_entity_id = -1;

        system_array _systems;
    };

    template <class... Containers>
    class zipper {
    public:
        using value_type = std::tuple<sparse_array<Containers>&...>;
        using reference = value_type;
        using pointer = void;
        using difference_type = std::size_t;
        using iterator_result
            = std::tuple<registry::entity_id_t, Containers&...>;

        class zipper_iterator {
        public:
            /**
             * @brief  Construct a new zipper iterator object
             * @param  &z: The zipper to iterate
             * @param  index: The index of the iterator
             * @retval None
             */
            iterator_result operator*()
            {
                return iterator_result(_idx,
                    std::get<sparse_array<Containers>&>(_current)[_idx]
                        .value()...);
            }
            /**
             * @brief  Increment the iterator
             * @retval Reference of the iterator
             */
            zipper_iterator& operator++()
            {
                incr_all<Containers...>();
                return *this;
            }
            /**
             * @brief  Return true if the two iterators are equal
             * @param  &other: The other iterator
             * @retval True if the two iterators are equal
             */
            friend bool operator==(
                zipper_iterator const& lhs, zipper_iterator const& rhs)
            {
                return lhs._idx == rhs._idx;
            }
            /**
             * @brief  Return true if the two iterators are different
             * @param  &lhs: The first iterator
             * @param  &rhs: The second iterator
             * @retval True if the two iterators are different
             */
            friend bool operator!=(
                zipper_iterator const& lhs, zipper_iterator const& rhs)
            {
                return !(lhs == rhs);
            }
            /**
             * @brief  Construct a new zipper iterator object
             * @param  idx: The index of the iterator
             * @param  current: The current zipper
             * @retval None
             */
            zipper_iterator(
                zipper::value_type& vref, std::size_t index, std::size_t end)
                : _current(vref)
                , _idx(index)
                , _end(end)
            {
                if (!all_set<Containers...>() && index != end) {
                    incr_all<Containers...>();
                }
            }

        private:
            /**
             * @brief Increment the index of the sparse array
             * @param  &c: The sparse array to increment
             * @retval None
             */
            template <typename... ContainersL>
            /**
             * @brief  Increment the index of the sparse array
             * @retval None
             */
            void incr_all()
            {
                for (++_idx; !all_set<ContainersL...>() && _idx != _end; ++_idx)
                    ;
            }

            /**
             * @brief  Check if all the containers are set at the current index
             * @param  T1: The first container
             * @param  Others: The other containers
             * @retval True if all the containers are set at the current index
             */
            template <typename T1, typename... Others>
            requires has_no_arguments_t<Others...>
            bool all_set() const
            {
                return std::get<sparse_array<T1>&>(_current).non_null(_idx);
            }

            /**
             * @brief  Check if all the containers are set at the current index
             * @param  T1: The first container
             * @param  Others: The other containers
             * @retval True if all the containers are set at the current index
             */
            template <typename T1, typename... Others>
            requires has_arguments_t<Others...>
            bool all_set() const
            {
                if (std::get<sparse_array<T1>&>(_current).non_null(_idx))
                    return all_set<Others...>();
                return false;
            }

        private:
            zipper::value_type& _current;
            std::size_t _idx;
            std::size_t _end;
            static constexpr std::index_sequence_for<Containers...> _seq {};
        };
        /**
         * @brief  Construct a new zipper object
         * @param  &reg: The registry to use
         * @retval None
         */
        zipper(registry& r)
            : _values(r.get_components<Containers>()...)
            , _end(_values, r.entities_count(), r.entities_count())
            , _begin(_values, 0, r.entities_count())
        {
        }
        /**
         * @brief  Return the begin iterator
         * @retval Begin iterator
         */
        zipper_iterator begin() { return _begin; }
        const zipper_iterator begin() const { return _begin; }
        /**
         * @brief  Return the end iterator
         * @retval End iterator
         */
        zipper_iterator end() { return _end; }
        const zipper_iterator end() const { return _end; }

    private:
        value_type _values;
        const zipper_iterator _end;
        const zipper_iterator _begin;
    };
}
}
