/**
 * SilvaState.hpp
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#pragma once

#include <stdexcept>
#include <memory>
#include <stack>
#include <unordered_map>

#ifndef SILVA_STATE_PRETTY_FUNCTION
    #if defined(_MSC_VER)
        #define SILVA_STATE_PRETTY_FUNCTION __FUNCSIG__
    #elif defined(__GNUC__) || defined(__GNUG__) || defined(__clang__)
        #define SILVA_STATE_PRETTY_FUNCTION __PRETTY_FUNCTION__
    #else
        #define SILVA_STATE_PRETTY_FUNCTION __func__ " (pretty function not supported)"
    #endif
#endif

#ifdef SILVA_STATE_LOG_SPDLOG
    #include <spdlog/spdlog.h>
    #include <iostream>
    #define SILVA_STATE_LOG(msg, ...) spdlog::info(msg, __VA_ARGS__);
#elif SILVA_STATE_LOG_FMT
    #include <format>
    #define SILVA_STATE_LOG(msg, ...) std::cout << std::format(msg, __VA_ARGS__) << std::endl
#else
    #define SILVA_STATE_LOG(msg, ...)
#endif

namespace hl {
namespace silva {
    namespace priv {
        /**
         * @brief Brief implementation of private State Interface
         */
        class IState {
        public:
            /**
             * @brief Destroy the IState object
             */
            inline virtual ~IState() = default;

            /**
             * @brief Construct a new IState object
             */
            inline IState() = default;

            /**
             * @brief Update the state
             */
            virtual void update() = 0;

            /**
             * @brief Starts the scene
             */
            virtual void start() = 0;

            /**
             * @brief Ends the scene
             */
            virtual void end() = 0;

#ifdef SILVA_STATE_HANDLE_EVENT
            /**
             * @brief Handle the events
             */
            virtual void handleEvent() = 0;
#endif
        };
    }

    /**
     * @brief Base abstract class for a State
     */
    class State : public priv::IState {
    public:
        /**
         * @brief Construct a new State object
         */
        inline State() = default;

#ifdef SILVA_STATE_HANDLE_EVENT
        /**
         * @brief Handle the events
         */
        inline void handleEvent() override { }
#endif

        inline ~State() override = default;
    };

    /**
     * @brief State Manager
     */
    class StateManager {
    private:
        /**
         * @brief The current pending state
         */
        State *_pendingState = nullptr;

        /**
         * @brief All the stacked states
         */
        std::stack<State *> _currentState;

        /**
         * @brief Number of states to pop in the next update
         */
        std::size_t _toPopCount = 0;

        /**
         * @brief The registered states
         */
        std::unordered_map<std::string, std::unique_ptr<State>> _registeredStates;

        /**
         * @brief Return a pointer to the asked scene
         */
        State *getState(const std::string &stateName)
        {
            auto it = std::find_if(_registeredStates.begin(), _registeredStates.end(),
                                      [&stateName](const auto &pair) {
                                        return pair.first == stateName;
                                      });
            if (it == _registeredStates.end())
                return nullptr;
            return it->second.get();
        }

        /**
         * @brief Really pop the state based on the count
         */
        void _actualPopState()
        {
            if (_toPopCount != 0) {
                SILVA_STATE_LOG("silva::StateManager: Popping {} state {}", _toPopCount, SILVA_STATE_PRETTY_FUNCTION);
            }
            for (std::size_t i = 0; i < _toPopCount; ++i) {
                _currentState.top()->end();
                _currentState.pop();
            }
            _toPopCount = 0;
        }

    public:
        /**
         * @brief Register a state
         * @param state The state to push
         * @param name The name of the state
         */
        void registerState(const std::string& stateName, std::unique_ptr<State>&& state)
        {
            SILVA_STATE_LOG("silva::StateManager: Registering state {} {}", stateName, SILVA_STATE_PRETTY_FUNCTION);
            if (getState(stateName) != nullptr)
                throw std::runtime_error(std::string("State ") + stateName + " is already registered");
            _registeredStates[stateName] = std::move(state);
        }

        /**
         * @brief Register a state
         * @param state The state to push
         * @param name The name of the state
         */
        void registerState(const std::string& stateName, State *state)
        {
            SILVA_STATE_LOG("silva::StateManager: Registering state {} {}", stateName, SILVA_STATE_PRETTY_FUNCTION);
            if (getState(stateName) != nullptr)
                throw std::runtime_error(std::string("State ") + stateName + " is already registered");
            _registeredStates[stateName] = std::unique_ptr<State>(state);
        }

        /**
         * @brief Push a new state on the stack
         * @tparam T The type of the state
         * @tparam Args The types of the arguments
         */
        template <typename... Args>
        inline void pushState(const std::string& state, Args&&... args)
        {
            SILVA_STATE_LOG("silva::StateManager: Pushing state {} {}", state, SILVA_STATE_PRETTY_FUNCTION);
            _currentState.push(getState(state));
            _currentState.top()->start(std::forward<Args>(args)...);
        }

        /**
         * @brief Pop the current state
         */
        inline void popState()
        {
            ++_toPopCount;
        }

        /**
         * @brief Change the current state
         *        when called only the pendingState is modified
         *        until the next update
         *        At the next update the currentState stack will be emptied
         *        and the pendingState will be pushed on the stack
         * @tparam T The type of the state
         * @tparam Args The types of the arguments
         */
        template <typename... Args>
        inline void changeState(const std::string& state, Args&&... args)
        {
            SILVA_STATE_LOG("silva::StateManager: Changing state {} - {}", state, SILVA_STATE_PRETTY_FUNCTION);
            _pendingState = getState(state);
            if (_pendingState == nullptr)
                throw std::runtime_error(std::string("State ") + state + " is not registered");
            SILVA_STATE_LOG("silva::StateManager: Pending state is now {} . {} - {}", state, (void *) _pendingState,
                            SILVA_STATE_PRETTY_FUNCTION);
        }

        /**
         * @brief Tells wheter the state will be changed
         */
        inline bool isInTransition() const { return _pendingState != nullptr; }

        /**
         * @brief Tells wheter the state machine is empty
         */
        inline bool canBeUpdated() const
        {
            return !_currentState.empty() || isInTransition();
        }

        /**
         * @brief Tells the state machine depth
         */
        inline size_t getDepth() const { return _currentState.size(); }

        /**
         * @brief Update the state machine
         *        If a state is pending (Which is different from pushed)
         *        All the stacked states are exited and the pending state is
         * pushed on the stack and initialized
         */
        inline bool update()
        {
            // SILVA_STATE_LOG("silva::StateManager: Updating state {}", SILVA_STATE_PRETTY_FUNCTION);
            _actualPopState();
            if (isInTransition()) {
                SILVA_STATE_LOG("silva::StateManager: Transitioning state {}", SILVA_STATE_PRETTY_FUNCTION);
                _toPopCount = _currentState.size();
                _actualPopState();
                _pendingState->start();
                _currentState.push(_pendingState);
                _pendingState = nullptr;
            } else if (_currentState.empty()) {
                return false;
            }
            _currentState.top()->update();
            return true;
        }

#ifdef SILVA_STATE_HANDLE_EVENT
        /**
         * @brief Handle the events
         */
        inline void handleEvent()
        {
            if (_currentState.empty())
                return;
            _currentState.top()->handleEvent();
        }
#endif

        /**
         * @brief Stop the state machine
         */
        inline void stop()
        {
            SILVA_STATE_LOG("silva::StateManager: Stopping state {}", SILVA_STATE_PRETTY_FUNCTION);
            _toPopCount = _currentState.size();
            if (_pendingState) {
                _pendingState->end();
                _pendingState = nullptr;
            }
        }
    };
}
}
